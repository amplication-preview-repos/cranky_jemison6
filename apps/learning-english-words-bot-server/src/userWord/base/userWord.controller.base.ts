/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserWordService } from "../userWord.service";
import { UserWordCreateInput } from "./UserWordCreateInput";
import { UserWord } from "./UserWord";
import { UserWordFindManyArgs } from "./UserWordFindManyArgs";
import { UserWordWhereUniqueInput } from "./UserWordWhereUniqueInput";
import { UserWordUpdateInput } from "./UserWordUpdateInput";

export class UserWordControllerBase {
  constructor(protected readonly service: UserWordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserWord })
  async createUserWord(
    @common.Body() data: UserWordCreateInput
  ): Promise<UserWord> {
    return await this.service.createUserWord({
      data: {
        ...data,

        word: data.word
          ? {
              connect: data.word,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        word: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserWord] })
  @ApiNestedQuery(UserWordFindManyArgs)
  async userWords(@common.Req() request: Request): Promise<UserWord[]> {
    const args = plainToClass(UserWordFindManyArgs, request.query);
    return this.service.userWords({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        word: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userWord(
    @common.Param() params: UserWordWhereUniqueInput
  ): Promise<UserWord | null> {
    const result = await this.service.userWord({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        word: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserWord(
    @common.Param() params: UserWordWhereUniqueInput,
    @common.Body() data: UserWordUpdateInput
  ): Promise<UserWord | null> {
    try {
      return await this.service.updateUserWord({
        where: params,
        data: {
          ...data,

          word: data.word
            ? {
                connect: data.word,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          word: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserWord(
    @common.Param() params: UserWordWhereUniqueInput
  ): Promise<UserWord | null> {
    try {
      return await this.service.deleteUserWord({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          word: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
