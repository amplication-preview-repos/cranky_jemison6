/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserWord as PrismaUserWord,
  Word as PrismaWord,
  User as PrismaUser,
} from "@prisma/client";

export class UserWordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserWordCountArgs, "select">): Promise<number> {
    return this.prisma.userWord.count(args);
  }

  async userWords(
    args: Prisma.UserWordFindManyArgs
  ): Promise<PrismaUserWord[]> {
    return this.prisma.userWord.findMany(args);
  }
  async userWord(
    args: Prisma.UserWordFindUniqueArgs
  ): Promise<PrismaUserWord | null> {
    return this.prisma.userWord.findUnique(args);
  }
  async createUserWord(
    args: Prisma.UserWordCreateArgs
  ): Promise<PrismaUserWord> {
    return this.prisma.userWord.create(args);
  }
  async updateUserWord(
    args: Prisma.UserWordUpdateArgs
  ): Promise<PrismaUserWord> {
    return this.prisma.userWord.update(args);
  }
  async deleteUserWord(
    args: Prisma.UserWordDeleteArgs
  ): Promise<PrismaUserWord> {
    return this.prisma.userWord.delete(args);
  }

  async getWord(parentId: string): Promise<PrismaWord | null> {
    return this.prisma.userWord
      .findUnique({
        where: { id: parentId },
      })
      .word();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userWord
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
